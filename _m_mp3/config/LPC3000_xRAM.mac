setup()
{
__var Reg;
  // Halt CPU immediately after reset
  __hwReset(0);
    // Disable WDT
  __writeMemory32(0x00000000,0x400040BC,"Memory");   // TIMCLK_CTRL = 0
  // Init clocks
  __writeMemory32(0x50<<2,0x40004050, "Memory");     // SYSCLK_CTRL - Switch to Main oscillator  
  // Set H divider and Per divider
  __writeMemory32(0x0000003D, 0x40004040, "Memory"); // PERIPH_CLK = PLL_CLK*1/16; 
                                                     // HCLK = PLL_CLK*1/2;
  // Set HPLL
  __writeMemory32(0x0001601E, 0x40004058, "Memory"); // HCLKPLL_CTRL OSC * 16 = 208MHz  
  do
  {
    Reg = __readMemory32(0x40004058, "Memory") & 1;  // HCLKPLL_CTRL_bit.LOOK
  }while(!Reg);
  
  // Switch to PLL output and out form the self-refresh of the SDRAM
  Reg = __readMemory32(0x40004044,"Memory");         // PWR_CTRL
  Reg &= ~((1 << 9) | (1 << 8));
  Reg |=   (1 << 2);
  __writeMemory32(Reg, 0x40004044, "Memory");
  Reg |=   (1 << 8);
  __writeMemory32(Reg, 0x40004044, "Memory");
  Reg &=  ~(1 << 8);
  __writeMemory32(Reg, 0x40004044, "Memory");
  
  // Disable 397 PLL
  __writeMemory32(0x00000002, 0x40004048, "Memory"); // PLL397_CTRL disable

  // MT48H16M16LF SDR SDRAM timings set
  __writeMemory32(0x00FFFFFF, 0x40028134, "Memory"); // P1_MUX_CLR = 0x00FFFFFF;
  __writeMemory32(0x00000008, 0x4002802C, "Memory"); // EMC_D_SEL = 0;
                                                     // SDRAM_D[31:19] are connected to 
                                                     // the SDRAM controller.

//    CLKPWR->clkpwr_sdramclk_ctrl = CLKPWR_SDRCLK_HCLK_DLY(7);
  __writeMemory32(0x0001C000, 0x40004068, "Memory"); // "SDRAMCLK_CTRL"     
//CLKPWR->clkpwr_sdramclk_ctrl &= ~(CLKPWR_SDRCLK_SLOWSLEW_CLK | CLKPWR_SDRCLK_SLOWSLEW | CLKPWR_SDRCLK_SLOWSLEW_DAT);                  
  __writeMemory32(0x0001C000, 0x40004068, "Memory"); // "SDRAMCLK_CTRL"


//EMC->emcdynamicconfig0 = (tmp << 7) | EMC_DYN_DEV_LP_SDR_SDRAM;
  __writeMemory32(0x00000682, 0x31080100, "Memory"); //"EMCDynamicConfig0"                   

//EMC->emcdynamicrascas0 = EMC_SET_CAS_IN_HALF_CYCLES(SDRAM_CAS_LATENCY) | EMC_SET_RAS_IN_CYCLES(SDRAM_RAS_LATENCY);
  __writeMemory32(0x00000202, 0x31080104, "Memory"); // "EMCDynamicRasCas0"                   
//EMC->emcdynamicreadconfig = (EMC_SDR_CLK_NODLY_CMD_DEL | EMC_SDR_READCAP_POS_POL);
  __writeMemory32(0x00000011, 0x31080028, "Memory"); // "EMCDynamicReadConfig"                
//EMC->emcdynamictrp = EMC_DYN_PRE_CMD_PER(clk / SDRAM_TRP_DELAY);
  __writeMemory32(0x00000001, 0x31080030, "Memory");    //"EMCDynamictRP"  
//EMC->emcdynamictras = EMC_DYN_ACTPRE_CMD_PER(clk / SDRAM_TRAS_DELAY);                        
  __writeMemory32(0x00000004, 0x31080034, "Memory"); // "EMCDynamictRAS"       


//EMC->emcdynamictsrex = EMC_DYN_SELF_RFSH_EXIT(clk / SDRAM_TSREX_TIME);                 
  __writeMemory32(0x0000006, 0x31080038, "Memory"); //"EMCDynamictSREX"                     
//EMC->emcdynamictwr = EMC_DYN_WR_RECOVERT_TIME(clk / SDRAM_TWR_TIME);
  __writeMemory32(0x00000001, 0x31080044, "Memory"); // EMCDynamictWR = 1    -  15ns
//EMC->emcdynamictrc = EMC_DYN_ACT2CMD_PER(7);
  __writeMemory32(0x00000007, 0x31080048, "Memory"); // EMCDynamictRC = 7    -  70ns
//EMC->emcdynamictxsr = EMC_DYN_EXIT_SRFSH_TIME(clk / SDRAM_TXSNR_TIME);
  __writeMemory32(0x00000006, 0x31080050, "Memory"); // EMCDynamictXSR = 8   -  60ns
//EMC->emcdynamictrrd = EMC_DYN_BANKA2BANKB_LAT(clk / SDRAM_TRRD_TIME);
  __writeMemory32(0x00000001, 0x31080054, "Memory"); // EMCDynamictRRD = 1   -  16ns
//EMC->emcdynamictmrd = EMC_DYN_LM2ACT_CMD_TIME(clk / SDRAM_TMRD_TIME);
  __writeMemory32(0x00000000, 0x31080058, "Memory"); // EMCDynamictMRD = 1   -  1ckl
//EMC->emcdynamictcdlr = EMC_DYN_LASTDIN_CMD_TIME(SDRAM_TCDLR_TIME);
  __writeMemory32(0x00000001, 0x3108005C, "Memory"); // EMCDynamicCDLR = 0   -  1ckl
//tmp = (EMC_DYN_CLK_ALWAYS_ON | EMC_DYN_CLKEN_ALWAYS_ON | EMC_DYN_DIS_INV_MEMCLK);
//EMC->emcdynamiccontrol = (tmp | EMC_DYN_NOP_MODE);
  __writeMemory32(0x00000193, 0x31080020, "Memory"); // EMCDynamicControl = 0x193;        // NOP
  __delay(100);
//EMC->emcdynamiccontrol = (tmp | EMC_DYN_PALL_MODE);
  __writeMemory32(0x00000113, 0x31080020, "Memory"); // EMCDynamicControl_bit.I = 2;     // PRECHARGE ALL
//EMC->emcdynamicrefresh = EMC_DYN_REFRESH_IVAL(4);
  __writeMemory32(0x00000000, 0x31080024, "Memory"); // EMCDynamicRefresh = 1;
  __delay(100);
//EMC->emcdynamicrefresh = EMC_DYN_REFRESH_IVAL(clk / SDRAM_RFSH_INTERVAL);
  __writeMemory32(0x00000032, 0x31080024, "Memory"); // EMCDynamicRefresh = (64ms/8192) * 104MHz / 16 = 50
//EMC->emcdynamiccontrol = (tmp | EMC_DYN_CMD_MODE);
  __writeMemory32(0x00000093, 0x31080020, "Memory"); // EMCDynamicControl_bit.I = 1;     // SDRAM MODE
  __delay(100);
  __writeMemory32(0x00000018, 0x31080020, "Memory"); // EMCDynamicControl_bit.I = 1;     // SDRAM MODE


  // Map IRAM at 0x00000000
  __writeMemory32(0x00000001, 0x40004014, "Memory"); // BOOT_MAP = 1;

}

execUserPreload()
{
  setup();
}
